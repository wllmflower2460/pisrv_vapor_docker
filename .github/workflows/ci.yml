name: CI
on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  # Whitelist (allowed) gitlinks; add here if you introduce new submodules.
  ALLOWED_GITLINKS: |
    DataDogsServer/h8-examples
    EdgeInfer/TCN-VAE_models
  # Only these must be present. Make others optional by leaving them out here.
  REQUIRED_GITLINKS: |
    DataDogsServer/h8-examples

jobs:
  build-and-test-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout (no auto-submodules)
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0

      - name: Init required submodule(s) if present
        shell: bash
        run: |
          set -euo pipefail
          for sm in DataDogsServer/h8-examples EdgeInfer/TCN-VAE_models; do
            if git ls-tree -d --name-only HEAD "$sm" >/dev/null 2>&1; then
              echo "Initializing submodule $sm"
              git submodule sync -- "$sm"
              git submodule update --init -- "$sm"
            else
              echo "Submodule $sm not present in this commit; skipping."
            fi
          done

      - name: Show submodule status
        shell: bash
        run: |
          git submodule status --recursive || true
          echo "Gitlinks (mode 160000):"
          git ls-files --stage | awk '$1=="160000"{print $4}'

      - name: Assert allowed/required submodules
        shell: bash
        run: |
          set -euo pipefail
          gitlinks="$(git ls-files --stage | awk '$1=="160000"{print $4}')"

          echo "Allowed (whitelist):"
          printf "%s\n" "$ALLOWED_GITLINKS"
          echo "Found gitlinks:"
          if [ -n "$gitlinks" ]; then
            printf "%s\n" "$gitlinks"
          else
            echo "(none)"
          fi

          # 1) Fail if any found gitlink is not on the whitelist
          if [ -n "$gitlinks" ]; then
            for g in $gitlinks; do
              printf "%s\n" "$ALLOWED_GITLINKS" | sed '/^\s*$/d' | grep -qx "$g" || {
                echo "Unexpected gitlink: $g"
                exit 1
              }
            done
          fi

          # 2) Ensure every REQUIRED_GITLINKS entry is present
          req_list="$(printf "%s\n" "$REQUIRED_GITLINKS" | sed '/^\s*$/d')"
          missing=0
          for req in $req_list; do
            if ! printf "%s\n" "$gitlinks" | grep -qx "$req"; then
              echo "Missing required gitlink: $req"
              missing=1
            fi
          done
          [ "$missing" -eq 0 ] || { echo "One or more required gitlinks missing."; exit 1; }
          echo "Submodule assertions passed."

      - name: Set up Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: "6.0.2"

      - name: Swift toolchain version
        run: swift --version

      - name: Install system deps (Vapor common)
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev libssl-dev zlib1g-dev libcurl4-openssl-dev

      - name: Cache SPM build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: ${{ runner.os }}-spm-

      - name: Resolve packages
        run: swift package resolve

      - name: Build (release)
        run: swift build -c release --disable-sandbox

      - name: Test
        run: swift test --parallel --disable-sandbox
